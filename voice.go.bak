package main

type VoiceWebhook struct {
	AccountSid    string `json:"AccountSid" form:"AccountSid" validate:"required"`
	ApiVersion    string `json:"ApiVersion" form:"ApiVersion" validate:"required"`
	CallSid       string `json:"CallSid" form:"CallSid" validate:"required"`
	CallStatus    string `json:"CallStatus" form:"CallStatus" validate:"required"`
	Called        string `json:"Called" form:"Called" validate:"required"`
	CalledCity    string `json:"CalledCity" form:"CalledCity" validate:"required"`
	CalledCountry string `json:"CalledCountry" form:"CalledCountry" validate:"required"`
	CalledState   string `json:"CalledState" form:"CalledState" validate:"required"`
	CalledZip     string `json:"CalledZip" form:"CalledZip" validate:"required"`
	Caller        string `json:"Caller" form:"Caller" validate:"required"`
	CallerCity    string `json:"CallerCity" form:"CallerCity" validate:"required"`
	CallerCountry string `json:"CallerCountry" form:"CallerCountry" validate:"required"`
	CallerName    string `json:"CallerName" form:"CallerName" validate:"required"`
	CallerState   string `json:"CallerState" form:"CallerState" validate:"required"`
	CallerZip     string `json:"CallerZip" form:"CallerZip" validate:"required"`
	Digits        string `json:"Digits" form:"Digits" validate:"required"`
	Direction     string `json:"Direction" form:"Direction" validate:"required"`
	FinishedOnKey string `json:"FinishedOnKey" form:"FinishedOnKey" validate:"required"`
	From          string `json:"From" form:"From" validate:"required"`
	FromCity      string `json:"FromCity" form:"FromCity" validate:"required"`
	FromCountry   string `json:"FromCountry" form:"FromCountry" validate:"required"`
	FromState     string `json:"FromState" form:"FromState" validate:"required"`
	FromZip       string `json:"FromZip" form:"FromZip" validate:"required"`
	To            string `json:"To" form:"To" validate:"required"`
	ToCity        string `json:"ToCity" form:"ToCity" validate:"required"`
	ToCountry     string `json:"ToCountry" form:"ToCountry" validate:"required"`
	ToState       string `json:"ToState" form:"ToState" validate:"required"`
	ToZip         string `json:"ToZip" form:"ToZip" validate:"required"`
	Msg           string `json:"msg" form:"msg" validate:"required"`
}

/*func smsHandler(c echo.Context) error {

	//Logger.Info("Received sms", zap.Any("msg", data)

	bytes, _ := io.ReadAll(c.Request().Body)

	Logger.Info("data", zap.Any("data", bytes))

	tValidator := tValidatorClient.NewRequestValidator(Cnf.TwilioPass)

	signature := c.Request().Header.Get("X-Twilio-Signature")

	parsedData, err := url.ParseQuery(string(bytes))

	resultMap := make(map[string]string)
	for key, values := range parsedData {
		if len(values) > 0 {
			resultMap[key] = values[0]
		}
	}

	jsonString, err := json.MarshalIndent(parsedData, "", "    ")
	if err != nil {
		fmt.Println("Error:", err)
	}

	// Print the pretty-printed JSON string
	fmt.Println(string(jsonString))

	//bodyBytes, err := io.ReadAll(c.Request().Body)
	//if err != nil {
	//	return err
	//}

	valid := tValidator.ValidateBody("https://"+Cnf.UrlBasePath+"/sms", bytes, signature)

	Logger.Info("Validation", zap.String("url", "https://"+Cnf.UrlBasePath+"/sms"), zap.Bool("Validation", valid))

	if !valid {
		Logger.Error("Request failed twilio validation", zap.Error(err))
	}

	//blocks, err := getBlockedNumbers()
	//if err != nil {
	//	logger.Error("Failed to get blocked phone numbers", zap.Error(err))
	//}

	var message = new(twiml.MessagingMessage)
	message.Body = "Bingo Bango"

	//for _, block := range blocks {
	//	if data["From"] == block.PhoneNumber {
	//		message.Body = "STOP"
	//	}
	//}

	twimlResult, err := twiml.Messages([]twiml.Element{message})
	if err != nil {
		c.String(http.StatusInternalServerError, err.Error())
	} else {
		//c.Header("Content-Type", "text/xml")
		c.Response().Header().Set("Content-Type", "text/xml")
		c.String(http.StatusOK, twimlResult)
	}
	return nil
}*/

/*func voiceHandler(c echo.Context) error {
	//play := &twiml.VoicePlay{
	//	Url: tunnel + "/testAudio",
	//}

	voiceBody := []twiml.Element{
		twiml.VoicePause{Length: "3"},
		twiml.VoiceGather{
			Action:    "/welcome",
			Method:    "POST",
			NumDigits: "1",
			Input:     "dtmf",
			Timeout:   "10",
			InnerElements: []twiml.Element{twiml.VoiceSay{
				Message:  "Welcome to Kayaking St. Augustine! Press 1 to speak to a representative.",
				Language: "en-US",
				Voice:    "Polly.Salli",
			},
			},
		},
		twiml.VoicePause{Length: "5"},
	}

	/*stream := twiml.VoiceStream{
		Name: "Voice Stream Handler",
		Url:  "wss://fully-lenient-grouse.ngrok-free.app/voiceStream",
	}


	twimlResult, err := twiml.Voice(voiceBody)
	if err != nil {
		c.String(http.StatusInternalServerError, err.Error())
	} else {
		c.Response().Header().Set("Content-Type", "text/xml")
		c.String(http.StatusOK, twimlResult)
	}

	fmt.Printf("%+v\n", twimlResult)

	return nil
	/*
	   c.Response().Header().Set("Content-Type", "text/xml")

	   c.String(http.StatusOK, fmt.Sprintf(`<?xml version="1.0" encoding="UTF-8"?><Response><Connect><Stream name="Voice Stream" url="wss://fully-lenient-grouse.ngrok-free.app/voiceStream" /></Connect></Response>`))

	   return nil

}

func holdMusicHandler(c echo.Context) error {
	fmt.Println("audio")

	file, err := os.Open(Cnf.HoldMusicPath)
	if err != nil {
		return err
	}
	defer file.Close()

	c.Response().Header().Set(echo.HeaderContentType, "audio/ogg")

	bufferSize := 1024
	buffer := make([]byte, bufferSize)
	for {
		n, err := file.Read(buffer)
		if err == io.EOF {
			break
		}
		if err != nil {
			return err
		}
		_, err = c.Response().Write(buffer[:n])
		if err != nil {
			return err
		}
	}

	return nil
}

func welcomeHandler(c echo.Context) error {
	call := new(VoiceWebhook)
	// Bind the request data to the struct
	if err := c.Bind(call); err != nil {
		return c.String(http.StatusBadRequest, "Invalid request data")
	}

	// Validate the request data
	//if err := c.Validate(call); err != nil {
	//	return c.String(http.StatusBadRequest, fmt.Sprintf("Validation error: %s", err.Error()))
	//}

	fmt.Println(call.Digits)

	var response []twiml.Element

	if call.Digits == "1" {
		response = []twiml.Element{
			twiml.VoiceSay{
				Message:  "Connecting you with someone who can help.",
				Language: "en-US",
				Voice:    "Polly.Salli",
			},
			twiml.VoiceEnqueue{
				Name:          "Rep",
				WaitUrlMethod: "POST",
				WaitUrl:       "/hold",
			},
			//twiml.VoiceDial{
			//	Number: "+18157017775",
			//},
		}
	} else {
		response = []twiml.Element{
			twiml.VoiceGather{
				Action:    "/welcome",
				Method:    "POST",
				NumDigits: "1",
				Input:     "dtmf",
				Timeout:   "10",
				InnerElements: []twiml.Element{twiml.VoiceSay{
					Message:  "Sorry that response was invalid. Please try again.",
					Language: "en-US",
					Voice:    "Polly.Salli",
				},
				},
			},
		}
	}

	twimlResult, err := twiml.Voice(response)
	if err != nil {
		c.String(http.StatusInternalServerError, err.Error())
	} else {
		c.Response().Header().Set("Content-Type", "text/xml")
		c.String(http.StatusOK, twimlResult)
	}

	return nil
}

func holdHandler(c echo.Context) error {
	play := []twiml.Element{twiml.VoicePlay{
		Url: "/holdMusic",
	}}
	twimlResult, err := twiml.Voice(play)
	if err != nil {
		c.String(http.StatusInternalServerError, err.Error())
	} else {
		c.Response().Header().Set("Content-Type", "text/xml")
		c.String(http.StatusOK, twimlResult)
	}

	agents, err := readAgents()
	if err != nil {
		Logger.Fatal("Failed to read agents", zap.Error(err))
	}

	for _, agent := range agents {
		if agent.Busy.TryLock() {
			outboundAgentCall(agent.Number)
		}
	}

	return nil
}*/

// func notificationsHandler(c echo.Context) error {
// }
